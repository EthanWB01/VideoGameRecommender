import csv
import requests
import mysql.connector
from collections import Counter
import random
API_KEY = "******************************"
BASE_URL = "https://api.rawg.io/api/games"

# MySQL database connection
db_connection = mysql.connector.connect(
    host="localhost",
    user="root",
    password="**************",
    database="STEAMSQL"
)
cursor = db_connection.cursor()


# Get game info from RAWG API
def get_game_info(game_name):
    params = {
        'search': game_name,
        'key': API_KEY
    }
    response = requests.get(BASE_URL, params=params)
    data = response.json()

    if data['results']:
        top_result = data['results'][0]
        return {
            'game_id': top_result['id'],
            'name': top_result['name'],
            'released': top_result['released'],
            'genres': [genre['name'] for genre in top_result['genres']]
        }
    return None


# Insert Genre
def insert_genre(genre_name):
    cursor.execute("SELECT Genre_ID FROM Genre WHERE Genre_Name = %s", (genre_name,))
    result = cursor.fetchone()
    if result:
        return result[0]
    cursor.execute("INSERT INTO Genre (Genre_Name) VALUES (%s)", (genre_name,))
    db_connection.commit()
    return cursor.lastrowid


# Insert Game
def insert_game(game_id, game_name, release_date):
    cursor.execute("SELECT Game_ID FROM Game_Catalog WHERE Game_ID = %s", (game_id,))
    if not cursor.fetchone():
        cursor.execute("""
            INSERT INTO Game_Catalog (Game_ID, Game_Name, Release_Date)
            VALUES (%s, %s, %s)
        """, (game_id, game_name, release_date))
        db_connection.commit()


# Insert Game-Genre mapping
def insert_game_genres(game_id, genre_ids):
    for genre_id in genre_ids:
        cursor.execute("""
            SELECT * FROM Game_Genres WHERE Game_ID = %s AND Genre_ID = %s
        """, (game_id, genre_id))
        if not cursor.fetchone():
            cursor.execute("""
                INSERT INTO Game_Genres (Game_ID, Genre_ID) VALUES (%s, %s)
            """, (game_id, genre_id))
            db_connection.commit()


# Insert test user if not exists
cursor.execute("SELECT * FROM Users WHERE Username = %s", ("test_user",))
if not cursor.fetchone():
    cursor.execute("INSERT INTO Users (Username) VALUES (%s)", ("test_user",))
    db_connection.commit()

cursor.execute("SELECT User_ID FROM Users WHERE Username = %s", ("test_user",))
user_id = cursor.fetchone()[0]

# Load CSV
with open('games.csv', newline='', encoding='utf-8') as csvfile:
    reader = csv.DictReader(csvfile)
    for row in reader:
        info = get_game_info(row['game_name'])
        if info:
            print(f"Matched: {info['name']} | Released: {info['released']} | Genres: {', '.join(info['genres'])}")

            genre_ids = [insert_genre(genre) for genre in info['genres']]
            insert_game(info['game_id'], info['name'], info['released'])
            insert_game_genres(info['game_id'], genre_ids)

            # Add to user library
            cursor.execute("""
                SELECT * FROM Users_Library WHERE User_ID = %s AND Game_ID = %s
            """, (user_id, info['game_id']))
            if not cursor.fetchone():
                cursor.execute("""
                    INSERT INTO Users_Library (User_ID, Game_ID) VALUES (%s, %s)
                """, (user_id, info['game_id']))
                db_connection.commit()
        else:
            print(f"No match found for: {row['game_name']}")


# Recommend game based on most common genre
def recommend_game():
    # Step 1: Get most common genre from user's library
    cursor.execute("""
        SELECT g.Genre_Name
        FROM Users_Library ul
        JOIN Game_Catalog gc ON ul.Game_ID = gc.Game_ID
        JOIN Game_Genres gg ON gc.Game_ID = gg.Game_ID
        JOIN Genre g ON gg.Genre_ID = g.Genre_ID
        WHERE ul.User_ID = %s
    """, (user_id,))

    genres = [genre[0] for genre in cursor.fetchall()]
    genre_counts = Counter(genres)

    print(f"Genre counts: {genre_counts}")

    if genre_counts:
        most_common_genre = genre_counts.most_common(1)[0][0]
        print(f"Most common genre: {most_common_genre}")

        # Step 2: Search RAWG API by genre
        genre_search_url = f"https://api.rawg.io/api/games"
        params = {
            'genres': most_common_genre.lower().replace(" ", "-"),
            'key': API_KEY,
            'page_size': 10  # fetch 10 results to pick randomly from
        }
        response = requests.get(genre_search_url, params=params)
        data = response.json()

        if data.get('results'):
            random_game = random.choice(data['results'])
            game_name = random_game['name']
            print(f"Recommended game from API: {game_name}")

            # Optional: Store in your Reccomend_Game table
            cursor.execute("""
                INSERT INTO Reccomend_Game (Rec_Game) VALUES (%s)
            """, (game_name,))
            db_connection.commit()
        else:
            print("No games found from RAWG API for this genre.")
    else:
        print("No games in the library to base a recommendation on.")

recommend_game()
